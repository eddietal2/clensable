/// npx prisma migrate dev --name <name>
/// npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------
// Users of the system
// --------------------
model User {
  id        String       @id @default(cuid())
  email     String       @unique
  firstName String
  lastName  String
  createdAt DateTime     @default(now())
  
  // Relation to magic tokens for login (magic links)
  tokens    MagicToken[]
  sessions  Session[]

  // Relation to organization
  orgId     String?      // optional if user may not belong to an org yet
  org       Org?         @relation("OrgUsers", fields: [orgId], references: [id])
  hasOrg       Boolean    @default(false)
}

// --------------------
// Magic links for passwordless login
// --------------------
model MagicToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  used      Boolean  @default(false)
}

// --------------------
// Organizations (companies that own campaigns)
// --------------------
model Org {
  id          String   @id @default(cuid())
  name        String
  zip         String?   // optional for existing rows
  radius      Int?   // optional for existing rows
  serviceType String?   // optional for existing rows

  stripeCustomerId String?

  users     User[] @relation("OrgUsers")
  campaigns Campaign[]
}

// --------------------
// Campaigns belong to an org and track leads and outreach
// --------------------
model Campaign {
  id        String   @id @default(cuid())
  name      String
  description String?
  targetZip String
  radius    Int
  category  String
  status    CampaignStatus @default(DRAFT)
  createdAt DateTime @default(now())
  orgId     String
  org       Org      @relation(fields: [orgId], references: [id])
  outreach  OutreachGroup[]
}

// Enum for campaign status
enum CampaignStatus {
  DRAFT
  ACTIVE
  COMPLETED
}

// --------------------
// Outreach messages (email/SMS) tied to campaigns
// --------------------
model OutreachGroup {
  id          String        @id @default(cuid())
  campaign    Campaign      @relation(fields: [campaignId], references: [id])
  campaignId  String
  description String
  name        String
  leads       OutreachLead[]
  createdAt   DateTime      @default(now())
}

model OutreachLead {
  id              String        @id @default(cuid())
  outreachGroup   OutreachGroup @relation(fields: [outreachGroupId], references: [id])
  outreachGroupId String
  placeId         String        // store the Google Place ID or unique lead ID
  leadData        Json
  status          String        @default("pending") // "pending", "contacted", "replied"
  createdAt       DateTime      @default(now())

  @@unique([outreachGroupId, placeId]) // prevent duplicate leads in same group
}


model Session {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

